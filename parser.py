import argparse
import json
import os
import time
from datetime import datetime

import requests
import schedule
from bs4 import BeautifulSoup
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
HISTORY_FILE = "history.json"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏

# –ï—Å–ª–∏ –±–µ–¥–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ –¢–ì, —Ç–æ –∫—Ä–∞—à–∏–º—Å—è
if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
    raise ValueError("TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã!")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
def load_history():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ —Ñ–∞–π–ª–∞."""
    if os.path.exists(HISTORY_FILE):
        with open(HISTORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

def save_history(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ñ–∞–π–ª."""
    with open(HISTORY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def parse_args():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(description="–ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Ñ–∏–≥—É—Ä–∫–∞–º–∏.")
    parser.add_argument("-d", "--dir", default=".", help="–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö")
    parser.add_argument("-f", "--file", default="statues.txt", help="–ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏")
    return parser.parse_args()

args = parse_args()
input_path = f"{args.dir}/{args.file}"

# –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–æ—á–∫–∞–º–∏ –Ω–∞ —Ñ–∏–≥—É—Ä–∫–∏
def read_input_file():
    # –ß–∏—Ç–∞–µ–º —Å—Å—ã–ª–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞)
    with open(input_path, "r", encoding="utf-8") as file:
        urls = [line.strip() for line in file if line.strip()]

    return urls

input_data = read_input_file()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
product_history = load_history()

# –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –º–Ω–µ –≤ –õ–°
def send_telegram_notification(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram."""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": message,
        "parse_mode": "Markdown"
    }

    response = requests.post(url, json=payload)
    if response.status_code != 200:
        print(f"Telegram response status code: {response.status_code}, Reason: {response.text}")


def parse_description_block(description_block):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –±–ª–æ–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
    description_data = {}

    if not description_block:
        return description_data

    description_elements = description_block.find_all(string=True, recursive=True)
    # –ò—â–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏)
    for element in description_elements:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Ç–µ–∫—Å—Ç –∏–∑ –ø—É—Å—Ç—ã—Ö —Ç–µ–≥–æ–≤
        if not element.strip() or (element.parent and not element.parent.get_text(strip=True)):
            continue

        text = element.strip()

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∏ —Å ":" (–∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ)
        if ":" in text:
            # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É ":", –æ—Å—Ç–∞–≤–ª—è—è –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
            key, value = text.split(":", 1)
            key = key.strip()
            value = value.strip()

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∫–ª—é—á–µ–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if key in description_data:
                description_data[key] += f"; {value}"  # –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
            else:
                description_data[key] = value
        else:
            # –î–ª—è —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ ":" —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å –æ–±—â–∏–º –∫–ª—é—á–æ–º "Note"
            if "Note" not in description_data:
                description_data["Note"] = []
            description_data["Note"].append(text)

    return description_data

# –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ –ø–æ —Ñ–∏–≥—É—Ä–∫–µ.
def parse_product_info(url):
    """–ü–∞—Ä—Å–∏—Ç 'Product Phase' –∏ 'Est Released Time' —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã."""
    try:
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        soup = BeautifulSoup(response.text, 'html.parser')

        # –ò—â–µ–º –±–ª–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π "Product Phase:"
        phase_block = soup.find(lambda tag: tag.text.strip().startswith("Product Phase:"))
        if phase_block:
            phase_text = ' '.join(phase_block.stripped_strings)  # –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
        else:
            phase_text = None

        # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –¥–ª—è "Est Released Time:"
        released_time_block = soup.find(lambda tag: tag.text.strip().startswith("Est Released Time:"))
        if released_time_block:
            released_time_text = ' '.join(released_time_block.stripped_strings)
        else:
            released_time_text = None

        # –ü–∞—Ä—Å–∏–º –±–ª–æ–∫ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
        description_block = soup.find("div", id="tab-description")
        description_data = parse_description_block(description_block)

        return {
            "phase": phase_text,
            "released_time": released_time_text,
            "description": description_data,
            "last_checked": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {url}: {str(e)}")
        return None


def check_products():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
    print(f"\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ {datetime.now().strftime('%d.%m %H:%M:%S')}")

    for url in input_data:
        current_info = parse_product_info(url)
        if not current_info:
            continue

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        last_info = product_history.get(url, {})

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        phase_changed = current_info["phase"] != last_info.get("phase")
        time_changed = current_info["released_time"] != last_info.get("released_time")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        description_changes = {}
        if "description" in current_info:
            for key, value in current_info["description"].items():
                if key not in last_info.get("description", {}) or last_info["description"][key] != value:
                    description_changes[key] = {
                        "old": last_info.get("description", {}).get(key, "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"),
                        "new": value
                    }

        if phase_changed or time_changed or description_changes:
            product_history[url] = current_info  # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

            # –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ - –ø—É—Å–∫–∞—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –Ω–µ –Ω–∞–¥–æ.
            if last_info == {}:
                continue

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_parts = [
                f"üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞!*",
                f"‚Ä¢ –¢–æ–≤–∞—Ä: {url}"
            ]

            if phase_changed:
                message_parts.append(
                    f"‚Ä¢ –°—Ç–∞—Ç—É—Å: `{last_info.get('phase', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}` ‚Üí `{current_info['phase']}`"
                )

            if time_changed:
                message_parts.append(
                    f"‚Ä¢ –í—Ä–µ–º—è –≤—ã—Ö–æ–¥–∞: `{last_info.get('released_time', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}` ‚Üí `{current_info['released_time']}`"
                )

            for key, change in description_changes.items():
                message_parts.append(
                    f"‚Ä¢ {key}: `{change['old']}` ‚Üí `{change['new']}`"
                )

            message = "\n".join(message_parts)
            send_telegram_notification(message)
            print(f"üì¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {url}")

    save_history(product_history)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.")


def run_scheduler():
    print("üîÑ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π...")
    schedule.every(6).hours.do(check_products)

    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


if __name__ == "__main__":
    check_products()  # –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–∞–∑—É
    run_scheduler()